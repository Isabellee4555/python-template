name: CI

on:
  pull_request:
    branches: [main, streamlit-deploy]
  push:
    branches: '**'

jobs:
# first job: run tests and pre-commit hooks
  test:
    runs-on: ubuntu-latest

    steps:
      # 1. Checkout code
      - name: Checkout code
        uses: actions/checkout@v4

      # 2. Set up Python
      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.12'  # or whatever your project uses

      # 3. Install Poetry
      - name: Install Poetry
        run: |
          curl -sSL https://install.python-poetry.org | python3 -
          echo "$HOME/.local/bin" >> $GITHUB_PATH

      # 4. Configure Poetry (disable venv creation, optional)
      - name: Configure Poetry
        run: poetry config virtualenvs.create false

      # 5. Install dependencies
      - name: Install dependencies
        run: poetry install --no-interaction --no-root

      # 6. Run pre-commit
      - name: Run pre-commit hooks
        run: poetry run pre-commit run --all-files

      # 7. Run tests with pytest
      - name: Run pytest
        run: PYTHONPATH=$(pwd)/src poetry run pytest -v
# second job: run pre-commit hooks only
  pre-commit:
    runs-on: ubuntu-latest
    steps:
      # 1. Checkout code
      - name: Checkout code
        uses: actions/checkout@v4

      # 2. Set up Python
      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.12'  # or whatever your project uses

      # 3. Install Poetry
      - name: Install Poetry
        run: |
          curl -sSL https://install.python-poetry.org | python3 -
          echo "$HOME/.local/bin" >> $GITHUB_PATH

      # 4. Configure Poetry (disable venv creation, optional)
      - name: Configure Poetry
        run: poetry config virtualenvs.create false

      # 5. Install dependencies
      - name: Install dependencies
        run: poetry install --no-interaction --no-root

      # 6. Run pre-commit hooks
      - name: Run pre-commit hooks
        run: poetry run pre-commit run --all-files

  deploy:
    if: github.ref != 'refs/heads/streamlit-deploy' # avoid deploying from the streamlit-deploy branch
    needs: [test]  # only deploy if tests pass
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.12'

      - name: Install Poetry
        run: |
          curl -sSL https://install.python-poetry.org | python3 -
          echo "$HOME/.local/bin" >> $GITHUB_PATH

      - name: Configure Poetry
        run: poetry config virtualenvs.create false

      - name: Install dependencies
        run: poetry install --no-interaction --no-root

      - name: Build site with Pelican in production mode
        run:  PYTHONPATH=. poetry run pelican mysite -s publishconf.py # build the site with production settings

      - name: Deploy to GitHub Pages
        uses: peaceiris/actions-gh-pages@v4
        with:
          github_token: ${{ secrets.GITHUB_TOKEN }}
          publish_dir: ./output

  streamlit-check:
    if: github.ref == 'refs/heads/streamlit-deploy'
    runs-on: ubuntu-latest
    needs: [test]  # optionally ensure tests pass first

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.12'

      - name: Install Poetry
        run: |
          curl -sSL https://install.python-poetry.org | python3 -
          echo "$HOME/.local/bin" >> $GITHUB_PATH

      - name: Configure Poetry
        run: poetry config virtualenvs.create false

      - name: Install dependencies
        run: poetry install --no-interaction --no-root

      - name: Run pre-commit hooks
        run: poetry run pre-commit run --all-files

      - name: "Smoke test: Import Streamlit"
        run: poetry run python -c "import streamlit"

      - name: "Smoke test: Start Streamlit app"
        run: |
          nohup poetry run streamlit run app.py --server.headless true &
          sleep 10
          curl -I http://localhost:8501 || (echo "Streamlit app failed to start" && exit 1)
